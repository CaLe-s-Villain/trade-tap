name: Auto-Create Branch on Label Assignment

on:
  issues:
    types: [labeled, unlabeled]

jobs:
  create-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Check if issue contains `wontfix`
        id: check-wontfix
        run: |
          if [[ "$(jq -r '.issue.labels[].name' "$GITHUB_EVENT_PATH")" == *"wontfix"* ]]; then
            echo "Branch creation skipped due to wontfix label."
            exit 0
          fi

      - name: Extract labels and determine branch type
        id: determine-branch
        run: |
          echo "üîç Extracting labels and building branch name..."
          PRIORITY_LABELS=("hotfix" "ci/cd" "feature" "bugfix" "security" "performance" "documentation" "test")
          LABELS=$(jq -r '.issue.labels[].name' "$GITHUB_EVENT_PATH" | tr '[:upper:]' '[:lower:]')

          echo "Labels on issue:"
          echo "$LABELS"

          SELECTED_LABEL=""
          for label in "${PRIORITY_LABELS[@]}"; do
            if echo "$LABELS" | grep -q "$label"; then
              SELECTED_LABEL=$label
              break
            fi
          done

          if [[ -z "$SELECTED_LABEL" ]]; then
            echo "‚ùå No valid work label found. Exiting."
            exit 0
          fi

          ISSUE_NUMBER=$(jq -r '.issue.number' "$GITHUB_EVENT_PATH")
          ISSUE_TITLE_RAW=$(jq -r '.issue.title' "$GITHUB_EVENT_PATH")
          STOP_WORDS=("create" "add" "fix" "update" "for" "to" "the" "a" "an" "of" "with" "is" "on" "in")

          # Normalize title
          CLEAN_TITLE=$(echo "$ISSUE_TITLE_RAW" | tr '[:upper:]' '[:lower:]')

          # Replace spaces and non-alphanumeric characters
          WORDS=($(echo "$CLEAN_TITLE" | tr -cd '[:alnum:] [:space:]-' | tr ' ' '\n'))

          # Filter stopwords and shorten
          SHORTENED=()
          for word in "${WORDS[@]}"; do
            skip=false
            for stop in "${STOP_WORDS[@]}"; do
              [[ "$word" == "$stop" ]] && skip=true && break
            done
            $skip || SHORTENED+=("$word")
            [[ ${#SHORTENED[@]} -ge 4 ]] && break
          done

          SLUG=$(IFS=- ; echo "${SHORTENED[*]}")

          # Map full label to short alias
          case "$SELECTED_LABEL" in
            feature)       SAFE_LABEL="feat" ;;
            bugfix)        SAFE_LABEL="fix" ;;
            documentation) SAFE_LABEL="docs" ;;
            test)          SAFE_LABEL="test" ;;
            ci/cd)         SAFE_LABEL="ci" ;;
            security)      SAFE_LABEL="sec" ;;
            performance)   SAFE_LABEL="perf" ;;
            *)             SAFE_LABEL=$(echo "$SELECTED_LABEL" | tr '/' '-') ;;
          esac

          BRANCH_NAME="${SAFE_LABEL}/${ISSUE_NUMBER}-${SLUG}"

          echo "‚úÖ Branch name to be created: $BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if branch already exists
        id: check-branch
        run: |
          if git ls-remote --heads origin "$BRANCH_NAME" | grep -q "$BRANCH_NAME"; then
            echo "Branch $BRANCH_NAME already exists. No action needed."
            exit 0
          fi

      - name: Create and push new branch
        run: |
          if [[ -z "$BRANCH_NAME" ]]; then
            echo "‚ùå BRANCH_NAME is empty. Aborting branch creation."
            exit 1
          fi

          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b "$BRANCH_NAME"
          git push https://x-access-token:${{ secrets.ACTIONS_PAT }}@github.com/${{ github.repository }}.git "$BRANCH_NAME"

      - name: Comment on issue with branch info
        run: |
          ISSUE_URL=$(jq -r '.issue.comments_url' "$GITHUB_EVENT_PATH")
          curl -s -X POST -H "Authorization: token ${{ secrets.ACTIONS_PAT }}"           -d '{"body": "üöÄ A new branch has been created: `'"$BRANCH_NAME"'`"}'           "$ISSUE_URL"
